from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from .models import Report
import os
from django.conf import settings
from django.http import FileResponse
import tempfile
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import letter
import logging

logger = logging.getLogger(__name__)

@login_required
def report_list(request):
    reports = Report.objects.filter(generated_by=request.user).order_by('-date_generated')
    logger.info(f"User: {request.user.email}, Reports count: {reports.count()}")
    
    context = {
        'reports': reports,
        'user_email': request.user.email,
        'reports_count': reports.count(),
        'reports_list': [{'id': r.id, 'name': r.name, 'date': r.date_generated} for r in reports],
        'debug': True
    }
    return render(request, 'reports/list.html', context)

@login_required
def report_generate(request):
    try:
        logger.info(f"Starting report generation for user: {request.user.email}")
        
        # Create reports directory if it doesn't exist
        reports_dir = os.path.join(settings.MEDIA_ROOT, 'reports')
        os.makedirs(reports_dir, exist_ok=True)
        
        # Create a temporary file
        temp_file = tempfile.NamedTemporaryFile(delete=False, suffix='.pdf')
        temp_path = temp_file.name
        logger.info(f"Created temporary file: {temp_path}")
        
        try:
            # Create the PDF
            c = canvas.Canvas(temp_path, pagesize=letter)
            c.drawString(100, 750, f"Report Generated by {request.user.email}")
            c.drawString(100, 700, "Construction Management System Report")
            c.save()
            logger.info("PDF content written successfully")
            
            # Create the report record
            filename = f"Report_{request.user.email}_{os.path.basename(temp_path)}"
            with open(temp_path, 'rb') as f:
                from django.core.files import File
                report = Report.objects.create(
                    name=filename,
                    generated_by=request.user,
                    file=File(f, name=filename)
                )
                logger.info(f"Report record created with ID: {report.id}")
            
            messages.success(request, 'Report generated successfully')
            
        finally:
            # Clean up the temporary file
            if os.path.exists(temp_path):
                os.unlink(temp_path)
                logger.info("Temporary file cleaned up")
        
    except Exception as e:
        logger.error(f"Error generating report: {str(e)}", exc_info=True)
        messages.error(request, f'Error generating report: {str(e)}')
    
    return redirect('reports:report_list')

@login_required
def report_view(request, report_id):
    report = get_object_or_404(Report, id=report_id, generated_by=request.user)
    try:
        logger.info(f"Attempting to open report file: {report.file.path}")
        return FileResponse(open(report.file.path, 'rb'), content_type='application/pdf')
    except FileNotFoundError:
        logger.error(f"Report file not found: {report.file.path}")
        messages.error(request, 'Report file not found')
        return redirect('reports:report_list')
    except Exception as e:
        logger.error(f"Error viewing report: {str(e)}", exc_info=True)
        messages.error(request, f'Error viewing report: {str(e)}')
        return redirect('reports:report_list')

@login_required
def report_delete(request, report_id):
    report = get_object_or_404(Report, id=report_id, generated_by=request.user)
    try:
        if report.file and os.path.exists(report.file.path):
            os.remove(report.file.path)
            logger.info(f"Deleted report file: {report.file.path}")
        report.delete()
        logger.info(f"Deleted report record with ID: {report_id}")
        messages.success(request, 'Report deleted successfully')
    except Exception as e:
        logger.error(f"Error deleting report: {str(e)}", exc_info=True)
        messages.error(request, f'Error deleting report: {str(e)}')
    
    return redirect('reports:report_list')
